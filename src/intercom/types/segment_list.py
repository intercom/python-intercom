# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from ..segments.types.segment import Segment


class SegmentList(UncheckedBaseModel):
    """
    This will return a list of Segment Objects. The result may also have a pages object if the response is paginated.
    """

    type: typing.Literal["segment.list"] = pydantic.Field(default="segment.list")
    """
    The type of the object
    """

    segments: typing.List[Segment] = pydantic.Field()
    """
    A list of Segment objects
    """

    pages: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    A pagination object, which may be empty, indicating no further pages to fetch.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
