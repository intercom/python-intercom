# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata


class RedactConversationRequest_ConversationPart(UncheckedBaseModel):
    type: typing.Literal["conversation_part"] = "conversation_part"
    conversation_id: str
    conversation_part_id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class RedactConversationRequest_Source(UncheckedBaseModel):
    type: typing.Literal["source"] = "source"
    conversation_id: str
    source_id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


RedactConversationRequest = typing_extensions.Annotated[
    typing.Union[RedactConversationRequest_ConversationPart, RedactConversationRequest_Source],
    UnionMetadata(discriminant="type"),
]
