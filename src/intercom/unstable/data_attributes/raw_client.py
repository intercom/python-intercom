# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.request_options import RequestOptions
from ...core.unchecked_base_model import construct_type
from ..errors.bad_request_error import BadRequestError
from ..errors.not_found_error import NotFoundError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.data_attribute_list import DataAttributeList
from ..types.error import Error
from .types.create_data_attribute_request_data_type import CreateDataAttributeRequestDataType
from .types.create_data_attribute_request_model import CreateDataAttributeRequestModel
from .types.data_attribute import DataAttribute
from .types.lis_data_attributes_request_model import LisDataAttributesRequestModel

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawDataAttributesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def lis_data_attributes(
        self,
        *,
        model: typing.Optional[LisDataAttributesRequestModel] = None,
        include_archived: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DataAttributeList]:
        """
        You can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations.

        Parameters
        ----------
        model : typing.Optional[LisDataAttributesRequestModel]
            Specify the data attribute model to return.

        include_archived : typing.Optional[bool]
            Include archived attributes in the list. By default we return only non archived data attributes.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DataAttributeList]
            Successful response
        """
        _response = self._client_wrapper.httpx_client.request(
            "data_attributes",
            method="GET",
            params={
                "model": model,
                "include_archived": include_archived,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataAttributeList,
                    construct_type(
                        type_=DataAttributeList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        construct_type(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_data_attribute(
        self,
        *,
        name: str,
        model: CreateDataAttributeRequestModel,
        data_type: CreateDataAttributeRequestDataType,
        description: typing.Optional[str] = OMIT,
        options: typing.Optional[typing.Sequence[str]] = OMIT,
        messenger_writable: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DataAttribute]:
        """
        You can create a data attributes for a `contact` or a `company`.

        Parameters
        ----------
        name : str
            The name of the data attribute.

        model : CreateDataAttributeRequestModel
            The model that the data attribute belongs to.

        data_type : CreateDataAttributeRequestDataType
            The type of data stored for this attribute.

        description : typing.Optional[str]
            The readable description you see in the UI for the attribute.

        options : typing.Optional[typing.Sequence[str]]
            To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`.

        messenger_writable : typing.Optional[bool]
            Can this attribute be updated by the Messenger

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DataAttribute]
            Successful
        """
        _response = self._client_wrapper.httpx_client.request(
            "data_attributes",
            method="POST",
            json={
                "name": name,
                "model": model,
                "data_type": data_type,
                "description": description,
                "options": options,
                "messenger_writable": messenger_writable,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataAttribute,
                    construct_type(
                        type_=DataAttribute,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        construct_type(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_data_attribute(
        self,
        id: int,
        *,
        archived: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        options: typing.Optional[typing.Sequence[str]] = OMIT,
        messenger_writable: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DataAttribute]:
        """

        You can update a data attribute.

        > ðŸš§ Updating the data type is not possible
        >
        > It is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead.

        Parameters
        ----------
        id : int
            The data attribute id

        archived : typing.Optional[bool]
            Whether the attribute is to be archived or not.

        description : typing.Optional[str]
            The readable description you see in the UI for the attribute.

        options : typing.Optional[typing.Sequence[str]]
            To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`.

        messenger_writable : typing.Optional[bool]
            Can this attribute be updated by the Messenger

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DataAttribute]
            Successful
        """
        _response = self._client_wrapper.httpx_client.request(
            f"data_attributes/{jsonable_encoder(id)}",
            method="PUT",
            json={
                "archived": archived,
                "description": description,
                "options": options,
                "messenger_writable": messenger_writable,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataAttribute,
                    construct_type(
                        type_=DataAttribute,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        construct_type(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawDataAttributesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def lis_data_attributes(
        self,
        *,
        model: typing.Optional[LisDataAttributesRequestModel] = None,
        include_archived: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DataAttributeList]:
        """
        You can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations.

        Parameters
        ----------
        model : typing.Optional[LisDataAttributesRequestModel]
            Specify the data attribute model to return.

        include_archived : typing.Optional[bool]
            Include archived attributes in the list. By default we return only non archived data attributes.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DataAttributeList]
            Successful response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "data_attributes",
            method="GET",
            params={
                "model": model,
                "include_archived": include_archived,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataAttributeList,
                    construct_type(
                        type_=DataAttributeList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        construct_type(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_data_attribute(
        self,
        *,
        name: str,
        model: CreateDataAttributeRequestModel,
        data_type: CreateDataAttributeRequestDataType,
        description: typing.Optional[str] = OMIT,
        options: typing.Optional[typing.Sequence[str]] = OMIT,
        messenger_writable: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DataAttribute]:
        """
        You can create a data attributes for a `contact` or a `company`.

        Parameters
        ----------
        name : str
            The name of the data attribute.

        model : CreateDataAttributeRequestModel
            The model that the data attribute belongs to.

        data_type : CreateDataAttributeRequestDataType
            The type of data stored for this attribute.

        description : typing.Optional[str]
            The readable description you see in the UI for the attribute.

        options : typing.Optional[typing.Sequence[str]]
            To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`.

        messenger_writable : typing.Optional[bool]
            Can this attribute be updated by the Messenger

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DataAttribute]
            Successful
        """
        _response = await self._client_wrapper.httpx_client.request(
            "data_attributes",
            method="POST",
            json={
                "name": name,
                "model": model,
                "data_type": data_type,
                "description": description,
                "options": options,
                "messenger_writable": messenger_writable,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataAttribute,
                    construct_type(
                        type_=DataAttribute,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        construct_type(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_data_attribute(
        self,
        id: int,
        *,
        archived: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        options: typing.Optional[typing.Sequence[str]] = OMIT,
        messenger_writable: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DataAttribute]:
        """

        You can update a data attribute.

        > ðŸš§ Updating the data type is not possible
        >
        > It is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead.

        Parameters
        ----------
        id : int
            The data attribute id

        archived : typing.Optional[bool]
            Whether the attribute is to be archived or not.

        description : typing.Optional[str]
            The readable description you see in the UI for the attribute.

        options : typing.Optional[typing.Sequence[str]]
            To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`.

        messenger_writable : typing.Optional[bool]
            Can this attribute be updated by the Messenger

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DataAttribute]
            Successful
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"data_attributes/{jsonable_encoder(id)}",
            method="PUT",
            json={
                "archived": archived,
                "description": description,
                "options": options,
                "messenger_writable": messenger_writable,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataAttribute,
                    construct_type(
                        type_=DataAttribute,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        construct_type(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
